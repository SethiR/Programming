* Forms
  :PROPERTIES:
  :CUSTOM_ID: forms
  :END:

*** Formsets
    :PROPERTIES:
    :CUSTOM_ID: formsets
    :END:

Create a simple model with few fields.

#+BEGIN_SRC python
    # models.py

    class Employee(models.Model):

        name = models.CharField(max_length=40)
        is_manager = models.BooleanField(default=False)
        email = models.CharField(max_length = 100)

        def __str__(self):
            return self.name
#+END_SRC

After creating a model, lets create a model form for that model. Also
create the formset for that model and form as shown below.

#+BEGIN_SRC python
    # forms.py

    from django import forms
    from .models import *
    from django.forms import modelformset_factory


    class EmployeeForm(forms.ModelForm):
        email = forms.EmailField(disabled=True)  # disable field

        class Meta:
            model = Employee
            fields = ['email', 'name', 'is_manager']


    EmployeeFormSet = modelformset_factory(Employee, form=EmployeeForm, max_num=0)
#+END_SRC

Use the formset created in the view.

#+BEGIN_SRC python
    # views.py

    from django.shortcuts import render
    from .forms import *
    from django.views import View
    from .models import *


    def index(request):
        context = {}
        if request.method == 'GET':
            
            formset = EmployeeFormSet()
            return render(request, 'tryformsets/index.html', {'formset' : formset})

        if request.method == 'POST':

            # formset = EmployeeFormSet(request.POST or None, request.FILES or None)
            formset = EmployeeFormSet(request.POST)
            if formset.is_valid():
                formset.save()
            formset = EmployeeFormSet()
            return render(request, 'tryformsets/index.html', {'formset' : formset})
#+END_SRC

Then create the template and use the formset. Make sure to include the
={{formset.management_form}}= else it gives error. For more information
check the
[[https://docs.djangoproject.com/en/2.2/topics/forms/formsets/#understanding-the-managementform][link]]

#+BEGIN_EXAMPLE
    <form method="POST" action=".">{% csrf_token %}

        {{ formset.management_form }}

        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Item Name</th>
                    <th>Item Price</th>
                </tr>
            </thead>
            {% for form in formset %}

            <tbody>
                {{ form.id }}
                <tr>
                    <td>{{ form.name }}</td>
                    <td>{{ form.email }}</td>
                    <td>{{ form.is_manager }}</td>
                </tr>
                {% endfor %}
            </tbody>

        </table>
        <button type="submit">Submit</button>
    </form>
#+END_EXAMPLE

#+BEGIN_HTML
  <hr>
#+END_HTML

** Working with DB
   :PROPERTIES:
   :CUSTOM_ID: working-with-db
   :END:

*** Bulk Update
    :PROPERTIES:
    :CUSTOM_ID: bulk-update
    :END:

#+BEGIN_SRC python
    # Coverage is a model which we need to update in bulk.
    # Here we are trying to update the rows with pk = 33, 34 and 35 with different values.
    >>> objs = []
    >>> objs.append(Coverage.objects.get(pk = 33))                                             
    >>>                                                                                        
    >>> objs.append(Coverage.objects.get(pk = 34))                                             
    >>> objs.append(Coverage.objects.get(pk = 35))                                             
    >>>                                                                                        
    >>> objs[1].coverage_needed = True                                                         
    >>>                                                                                        
    >>> objs[1].coverage_needed                                                                
    True                                                                                       
    >>>                                                                                        
    >>> objs[2].coverage_needed                                                                
    False                                                                                      
    >>>                                                                                        
    >>> objs[0].unavailable = True                                                             
    >>>                                                                                        
    >>> objs[2].supply_called = True                                                           
    >>>                                                                                        
    >>> Coverage.objects.bulk_update(objs, ['coverage_needed', 'supply_called', 'unavailable'])
#+END_SRC

** Links
   :PROPERTIES:
   :CUSTOM_ID: links
   :END:

*** Forms
    :PROPERTIES:
    :CUSTOM_ID: forms-1
    :END:

- [[https://stackoverflow.com/questions/56290703/django-edit-html-table-rows-and-update-database][DataTable
  Editable]]
- [[https://stackoverflow.com/questions/39183155/django-with-html-forms][Django
  Forms - HTML]]
- [[https://simpleisbetterthancomplex.com/article/2017/08/19/how-to-render-django-form-manually.html][Django
  Forms - Rendering each form element manually for better styling.]]
